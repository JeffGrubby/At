package com.ylmall.at.service.Impl;

import java.util.List;

import org.springframework.stereotype.Service;

import com.ylmall.at.dao.OrderInfoDao;
import com.ylmall.at.dao.OrderSplitDao;
import com.ylmall.at.dao.OrderStateDao;
import com.ylmall.at.dao.StorkDao;
import com.ylmall.at.service.DRPValidateService;
import com.ylmall.at.service.MatrixAlgorithmService;
import com.ylmall.at.service.ShopSelectService;
import com.ylmall.at.tobject.Order;
import com.ylmall.at.tobject.ResultShop;
import com.ylmall.at.tobject.SelectedShop;
import com.ylmall.at.tobject.TargetShop;

/**
 * 
 * At.com.ylmall.at.service.Impl
 * @author JeffGrubb
 * @version 1.0
 * 2016下午3:42:29
 */


@Service("shopSelectService")
public class ShopSelectServiceImpl implements ShopSelectService{
	
	private ResultShop resultShop;
	private OrderInfoDao orderInfoDao;
	private OrderStateDao orderStateDao;
	private OrderSplitDao orderSplitDao;
	private StorkDao storkDao;
	private MatrixAlgorithmService ma;
	private DRPValidateService drp;
	
		
	/**实现命中算法接口 */
	public ResultShop resultShop(Order order) {
		
		resultShop = new ResultShop();
		List<SelectedShop>	selectedShopList;
		List<TargetShop> targetShopList;
		List<String> missedSku;
		MatrixServiceImpl ms;
		
		// TODO 对订单对象判空
		if(null==order||0==order.getOriginOrderList().size()){
			//输出日志
			return null;
		}
			
		// TODO 查询订单明细表中此订单号对应shopCode
		String shopCode=orderInfoDao.selectShopCode(order.getOrderId());
		
		if(null==shopCode){
			// TODO sql查询符合订单条件的全部门店集合(首次拆单)
			selectedShopList = storkDao.selectSkuShop();
			// TODO 将订单对象插入订单状态，订单明细表
			orderStateDao.insertOrderState(order);
			orderInfoDao.insertOrderInfo(order);
			/*for(int i=0;i<order.getOriginOrderList().size();i++)
				orderInfoDao.insertOrderInfo(order.getOrderId(), order.getOriginOrderList().get(i).get("sku").toString(),
					 StringUtil.toInt(order.getOriginOrderList().get(i).get("amount").toString()), null);*/
		}
		else{
			// TODO 排除特定门店再筛选(重新拆单)
			selectedShopList = storkDao.reselectSkuShop(shopCode);
			// TODO 修改订单状态表状态为"待拆分"
			order.setOrderState("待拆分");
			orderStateDao.UpdateOrderState(order);
		}
		
		
		// TODO 对sql查询结果判空
		if(null==selectedShopList||0==selectedShopList.size()){
			//输出日志
			
			return null;
		}
			
		// TODO 初始化矩阵
		ms = new MatrixServiceImpl();
		ms.initMatrix(selectedShopList);		
		// TODO 矩阵筛选
		ma = new MatrixAlgorithmServiceImpl(ms);
		targetShopList = ma.selectShop(ms.getMatrix(), ms.getReposRow(), ms.getReposColumn());
		// TODO 输出初始矩阵信息（日志打印）
		
		// TODO DRP循环校验
		missedSku = drp.Validate(targetShopList);
		while(null!=missedSku){
			ma.modify(targetShopList, missedSku);
			targetShopList = ma.selectShop(ms.getMatrix(), ms.getReposRow(), ms.getReposColumn());
			missedSku = drp.Validate(targetShopList);
		}
		
		// TODO 生成结果集对象
		resultShop.setOriginOrderId(order.getOrderId());
		resultShop.setOrderList(targetShopList);
		
		// TODO 将结果集写入到订单拆分,明细,状态表
		orderSplitDao.insertOrderSplit(resultShop);
		orderInfoDao.insertResult(resultShop);
		orderStateDao.insertResultState(resultShop);
		// TODO 更改源订单状态为已拆分
		order.setOrderState("已拆分");
		orderStateDao.UpdateOrderState(order);
		
		return resultShop;
	}

	
	
	public ShopSelectServiceImpl() {
		// TODO Auto-generated constructor stub
	}

}
