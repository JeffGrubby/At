/**
 * 
 */
package myTest;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.log4j.Logger;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import com.alibaba.fastjson.JSON;
import com.ylmall.at.dao.OrderInfoDao;
import com.ylmall.at.dao.OrderSplitDao;
import com.ylmall.at.dao.OrderStateDao;
import com.ylmall.at.dao.StorkChangeDao;
import com.ylmall.at.dao.StorkDao;
import com.ylmall.at.model.SkuNeed;
import com.ylmall.at.service.MatrixAlgorithmService;
import com.ylmall.at.service.Impl.MatrixAlgorithmServiceImpl;
import com.ylmall.at.service.Impl.MatrixServiceImpl;
import com.ylmall.at.tobject.Order;
import com.ylmall.at.tobject.ResultShop;
import com.ylmall.at.tobject.SelectedShop;
import com.ylmall.at.tobject.TargetShop;
import com.ylmall.at.util.ResultUtil;



/**
 * At.myTest
 * @author JeffGrubb
 * @version 1.0
 * 2016上午9:07:05
 */
@RunWith(SpringJUnit4ClassRunner.class)    
@ContextConfiguration(locations = {"classpath:/spring-mybatis.xml"})

public class TestMyService {
	private static Logger logger = Logger.getLogger(TestMyService.class);

	private Order order;
	private ArrayList<SkuNeed> originOrderList = new ArrayList<SkuNeed>();
//	private MatrixService ms = null; 
	private MatrixAlgorithmService ma;
	private List<SelectedShop> shopList = new ArrayList<SelectedShop>();
	private ResultShop resultShop;
	
	@Resource
	private OrderInfoDao orderInfoDao;
	@Resource
	private OrderStateDao orderStateDao;
	@Resource
	private OrderSplitDao orderSplitDao;
	@Resource
	private StorkDao storkDao;
	@Resource
	private StorkChangeDao storkChangeDao;

//	private DRPValidateService drp;
	@Before
	public void old(){
		originOrderList.add(new SkuNeed("sku1",10));
		originOrderList.add(new SkuNeed("sku2",10));
		originOrderList.add(new SkuNeed("sku3",10));
		order = new Order();
		order.setOrderId("A");
		order.setOrderState("ready");
		order.setOriginOrderList(originOrderList);
		
		SelectedShop temp;
		temp = new SelectedShop();
		temp.setShopCode("s1");
		temp.setSku("sku1");
		shopList.add(temp);
		
		temp = new SelectedShop();
		temp.setShopCode("s1");
		temp.setSku("sku2");
		shopList.add(temp);
		
		temp = new SelectedShop();
		temp.setShopCode("s2");
		temp.setSku("sku3");
		shopList.add(temp);
		
		temp = new SelectedShop();
		temp.setShopCode("s2");
		temp.setSku("sku1");
		shopList.add(temp);
//		ms = new MatrixServiceImpl(order);
	}
	
	@Test  
    public void test1() {
		long before = System.currentTimeMillis();
	
		resultShop = new ResultShop();
		List<SelectedShop>	selectedShopList;
		List<TargetShop> targetShopList;
//		List<String> missedSku;
		MatrixServiceImpl ms;
		
		// TODO 对订单对象判空
		if(null==order||0==order.getOriginOrderList().size()){
			//输出日志
			logger.info("Order is null");
			return ;
		}
		logger.error("begin");
		//---------------------------------------------
		// TODO 查询订单明细表中此订单号对应shopCode
		System.out.println(order.getOrderId());
		List<String> shopCode=orderInfoDao.selectShopCode(order.getOrderId());
        logger.error(JSON.toJSONString(shopCode));
    
        
        //----------------------------------------------
		if(null==shopCode){
			// TODO sql查询符合订单条件的全部门店集合(首次拆单)
			selectedShopList = storkDao.selectSkuShop(order);
			// TODO 将订单对象插入订单状态，订单明细表
			orderStateDao.insertOrderState(order);
			orderInfoDao.insertOrderInfo(order);
			
		}
		else{
			// TODO 排除特定门店再筛选(重新拆单)
//			Map<String,Object> map = new HashMap<String,Object>();
//			map.put("order", order.getOriginOrderList());
//			map.put("shopCode", shopCode);
//			selectedShopList = storkDao.reselectSkuShop(map);
			// TODO 修改订单状态表状态为"待拆分"
			order.setOrderState("待拆分");
			orderStateDao.UpdateOrderState(order);
		}
		//--------------------------------------------
		
		// TODO 对sql查询结果判空
		if(null==shopList||0==shopList.size()){
			//输出日志
			logger.error("error selectShop");
			return ;
		}
			
		// TODO 初始化矩阵(order是为了赋值对应sku的数量)
		ms = new MatrixServiceImpl(order);
		ms.initMatrix(shopList);

		// TODO 矩阵筛选
		ma = new MatrixAlgorithmServiceImpl(ms);
		targetShopList = ma.selectShop(ms.getMatrix(), ms.getReposRow(), ms.getReposColumn());
		
		// TODO 输出初始矩阵信息（日志打印）
//		logger.error(StringUtil.MatrixToStr(ms.getMatrix(), ms.getShopArray(), ms.getSkuArray()));
		
		// TODO DRP循环校验
		for(int i = 0;i<targetShopList.size();i++)
		{
			if(i==1) targetShopList.get(i).setOrderId(null);
			else targetShopList.get(i).setOrderId("exist");
		}
		List<String> sku = new ArrayList<String>();
		//对应门店不匹配的sku
		sku.add("sku3");
		sku.add("sku1");
		ma.modify(targetShopList,sku);
		targetShopList = ma.selectShop(ms.getMatrix(), ms.getReposRow(), ms.getReposColumn());
		
		//将sql未查询到的sku补充到"NOT"子订单中
		ResultUtil.addSqlMissedSku(order, targetShopList, ms);
		
		// TODO 生成结果集对象
		resultShop.setOriginOrderId(order.getOrderId());
		resultShop.setOrderList(targetShopList);
		
		// TODO 输出结果
		System.out.println(resultShop.getOriginOrderId());
		for(TargetShop targetShop:resultShop.getOrderList())
		{
			System.out.print(targetShop.getOrderId()+" "+targetShop.getShopCode()+": ");
			for(SkuNeed s:targetShop.getChildOrderList())
				System.out.print(s.getSku()+" "+s.getAmount()+" ");
			System.out.println("");
		}
		// TODO 将结果集写入到订单拆分,明细,状态表
		orderSplitDao.insertOrderSplit(resultShop);
//		orderInfoDao.insertResult(resultShop);
//		orderStateDao.insertResultState(resultShop);
//		storkDao.updateStorkByResult(resultShop);
//		storkChangeDao.insertStorkChange(resultShop);
//		// TODO 更改源订单状态为已拆分
//		order.setOrderState("已拆分");
//		orderStateDao.UpdateOrderState(order);
		
		long after = System.currentTimeMillis();
		System.out.println("------------------------");
		System.out.println("time="+(after-before)+"millis");
    }  
}
